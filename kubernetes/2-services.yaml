apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/so1-proyecto2: "true"
        io.kompose.service: mongodb
    spec:
      containers:
      - image: mongo
        name: mongodb
        ports:
        - containerPort: 27017
          hostPort: 27017
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data/db
          name: mongodb-data
      restartPolicy: Always
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
---
apiVersion: v1
kind: Service
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  type: LoadBalancer
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
  selector:
    io.kompose.service: mongodb
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: mongodb-data
  name: mongodb-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  template:
    metadata:
      labels:
        io.kompose.network/so1-proyecto2: "true"
        io.kompose.service: redis
    spec:
      containers:
      - image: redis
        name: redis
        ports:
        - containerPort: 6379
          hostPort: 6379
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: redis
  name: redis
spec:
  type: LoadBalancer
  ports:
  - name: "6379"
    port: 6379
    targetPort: 6379
  selector:
    io.kompose.service: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: grafana
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/so1-proyecto2: "true"
        io.kompose.service: grafana
    spec:
      containers:
      - image: grafana/grafana
        name: grafana
        ports:
        - containerPort: 3000
          hostPort: 3000
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: grafana
  name: grafana
spec:
  type: LoadBalancer
  ports:
  - name: "3000"
    port: 3000
    targetPort: 3000
  selector:
    io.kompose.service: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: zookeeper
  template:
    metadata:
      labels:
        io.kompose.network/so1-proyecto2: "true"
        io.kompose.service: zookeeper
    spec:
      containers:
      - env:
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        image: bitnami/zookeeper:latest
        name: zookeeper
        ports:
        - containerPort: 2181
          hostPort: 2181
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  ports:
  - name: "2181"
    port: 2181
    targetPort: 2181
  selector:
    io.kompose.service: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kafka
  template:
    metadata:
      labels:
        io.kompose.network/so1-proyecto2: "true"
        io.kompose.service: kafka
    spec:
      containers:
      - env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: PLAINTEXT://kafka:9092
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        image: bitnami/kafka:latest
        name: kafka
        ports:
        - containerPort: 9092
          hostPort: 9092
          protocol: TCP
        resources: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  namespace: jlixsopes1p2
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  ports:
  - name: "9092"
    port: 9092
    targetPort: 9092
  selector:
    io.kompose.service: kafka
